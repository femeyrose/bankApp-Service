//server point starts at index.js
//we can use any names other than index.js
but std one is index.js

we can perform the terminal operations in the terminal of VS code



http verbs/http methods

//post - to create data (like user, transactions) we use post
//get- to fetch/read any data (when browser is run, get is called)
//put- update or replace
//patch- update or replace, but partial update
//delete-to delete

REST-representational state transfer (set of constrains/rules/ it is an architecture)
REST APIs- get,put,post,patch,delete are the verbs in the restart
these are the contraints in the REST
if all the rules are obeyed by an API then it is said to be REST


//these http verbs/http methods are used in the postman

//note without using the 
// app.listen(3000, ()=>
// {console.log("server started at port 3000")});
//will not work since the port will not open

//npm i -g nodemon
//every time after any changes we have to stop and then restart (node index.js) the server
//to avoid this we install the above nodemon
//now to run the TYPE in cmd nodemon index.js
//now no need to stop and start

//3 ways our express server is created
thats why it is light weight and simple
which means the developer does not have to write them from scratch but uses ready-made templates and saves a great deal of time. 
Express.js considerably assists in keeping the code clean and organized.


//status codes in postman
100 series-informational
200 series-success ('ok' in postman)
3xx-redirection
4xx-client error (eg:403 forbidden, 401-authorization failed/unauthorized,404 error)
5xx-server errors

422-unprocessable entity

401-unauthorized

//middle ware
app.use(session({
    secret:'randomsecurestring',
    resave:false,
    saveUninitialized:false
}));

this is apllication wide middle ware
middle ware is a fn
after each request/application, all will be go through  middleware
this can be seen in cmd after each sessions run
middleware works commonly and simplify the code 
we can write the codes commonly eg: if user tries to deposit without login,message will appear "please login"
but after the server starts, the details will be used

when session is initialzed globally, we can use in every routers

middle ware- apllication wide middle ware
here, for any application, the log will be given in cmd
next(); used in the middle ware is to route to the next router when the true condition not works

in short: all APIs (application) will go through the middleware, after each application (app.post for deposit/login..etc)
middleware will work

adv of middleware: common things like conditions can be given here (eg: if user tries to deposit without login,message will appear "please login")
another eg: common login functionality

app.use((req,res,next)=>{
    console.log(req.body);
    next();
})

//now the body of postman of each application all the request will be printed in the console (cmd)

but if we use middleware we don't need to print the message 'please login' while doing registration,
ie, we need this only in deposit, withdraw and transactions route.
for that we use authMiddleware.
now after registration ,without login if we perform any deposit, withdraw and transactions, message 'please login' will appear
correct performance will be done only after the login

browser will give unique number to browser after each session
ie, while login, a session starts and each user has unique session number
so sessions uses unique id rather than a variable like amount/type
seesion is for server and cookies for browser


filter operator in an array
var array=[1,2,3,4]
array.filter(a=>a!=3)
o/p = [1,2,4]

Mongo Db
================
cross platform -windows,linux, mac
sequel Db
data stored in json format
tools used: compass, community server
compass is a tool in mongo db, it is used to see/query db
ie, compass is a GUI in mongo db

interview questions
======================
we are doing session wise authentication

JWT token- is a length token, signed token, inside this token the code is encoded

edit,delete,listing and do in express, node


MongoDb installation
========================
https://docs.mongodb.com/manual/administration/install-community/


doubts
==========
> work flow b/w index, db and data.service
> index.js (eg:register) fn is called >data.service >findone user from db>return to index.js   ? after that is it execute to next line or .then of index.js> when .then of data.service works?






















